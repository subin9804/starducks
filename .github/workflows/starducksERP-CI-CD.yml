name: starducksERP CI/CD

on:
  push:
    branches:
      - master

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

    ## jdk setting
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'


## gradle caching 
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-


## create application.properties 보안을 위해 깃허브에 안 올릴 때는 SECRET에 따로 만들어야 한다.
## 해당 내용은 깃허브 레포지토리의 Settings > Secrets > Actions > New repository secret 버튼을 통해 만들 수 있음
    # - name: make application.properties
    #   if: contains(github.ref, 'master') # branch가 master일 때
    #   run: | 
    #       cd ./src/main/resources 
    #       touch ./application.properties 
    #       echo "${{ secrets.PROPERTIES }}" > ./application.properties 
    #   shell: bash


## gradle build
    - name: Build with Gradle
      run: | 
          chmod +x ./gradlew
          ./gradlew clean build -x test


## docker build & push to production 
    - name: Docker build & push to repo
      if: contains(github.ref, 'master')
      run: | 
          pwd
          echo ${{ secrets.DOCKER_PASSWORD }} | sudo docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          sudo docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}:${{ github.sha }} .
          sudo docker push ${{ secrets.DOCKER_REPO }}:${{ github.sha }}


## deploy to production
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy
      if: contains(github.ref, 'master')
      with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          envs: GITHUB_SHA
          script: | 
                sudo docker rm -f $(docker ps -qa)
                sudo docker pull ${{ secrets.DOCKER_REPO }}:${{ github.sha }}
                sudo docker run -d -p 8080:8080 --name starducks ${{ secrets.DOCKER_REPO }}:${{ github.sha }}
                sudo docker image prune -f
